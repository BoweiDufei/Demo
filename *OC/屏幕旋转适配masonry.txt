控制ViewController.m中
如果要动态修改约束，一定要重写updateViewConstraints方法
并且要带上 [super updateViewConstraints];

- (void)updateViewConstraints{
  // XXXXX 代码
  [super updateViewConstraints];
}
这个方法在viewWillAppear后面执行，在viewDidAppear之前执行

1，一般布局Basic布局
************************************************************************
self.view
   *** greenView
   *** redView
   *** blueView

UIView *superview = self.view;
int padding = 10;

// 三个都要设置约束
[greenView mas_makeConstraints:^(MASConstraintMaker *make) {
  make.top.equalTo(superview.mas_top).offset(padding)
  .left.
  .bottom.
  .right.
  .width.equalTo(redView.width)
  .heigth.
  .height.
}];
注意 mas_top和 top的区别
.top是设置高间距，.mas_top是获取view本身的mas_top间距
mas_width, mas_height, mas_top, mas_bottom, 

.equalTo 是相等
.offset(-padding) 要做调整


2，动态修改约束 update
************************************************************************
在UIView中 给按钮添加事件
-(void)a{

  [self setNeedsUpdateConstraints];
  [self updateConstraintsIfNeeded];
  [UIView animateWithDuration:0.4 animations:^{
      [self layoutIfNeeded];
  }];

}
重写updateConstraints事件
- (void)updateConstraints {

  [self.growingButton updateConstraints:^(MASConstraintMaker *make) {
      make.center.equalTo(self);
      make.width.equalTo(@(self.buttonSize.width)).priorityLow();
      make.height.equalTo(@(self.buttonSize.height)).priorityLow();
      make.width.lessThanOrEqualTo(self);
      make.height.lessThanOrEqualTo(self);
  }];
  
  [super updateConstraints];
}
总结：
1，按钮点击触发事件中
执行
[self setNeedsUpdateConstraints];
[self updateConstraintsIfNeeded];
[self layoutIfNeeded]; // 如果需要动画，使用[UIView ani...]
2，重写updateConstraints 
关键，一定要使用 updateConstraints 方法，不再是mas_
官方案例上新增加了一个静态方法

+ (BOOL)requiresConstraintBasedLayout
{
    return YES;
}
我没写折行代码，效果也能出的来

UIViewController中更新约束方法
1，激活方法
-(void)a{
  [self.view setNeedsUpdateConstraints];
  [self.view updateConstraintsIfNeeded];
  
  [UIView animateWithDuration:0.4 animations:^{
      [self.view layoutIfNeeded];
  }];
}
2，重写updateViewConstraints 不是 updateConstraints
- (void)updateViewConstraints{
    NSLog(@"%s",__func__);
    CGSize btnSize = self.centerBtn.bounds.size;
    [self.centerBtn mas_updateConstraints:^(MASConstraintMaker *make) {
        make.center.equalTo(self.view);
        make.width.equalTo(@(btnSize.width+10));
        make.height.equalTo(@(btnSize.height+10));
        make.width.lessThanOrEqualTo(self.view);
        make.height.lessThanOrEqualTo(self.view);
    }];
    [super updateViewConstraints];
}

3，动态重新部署约束 remark
************************************************************************
大部分跟mas_update一样，只是换了个方法 mas_remakeConstraints






总结：
make.left.equalTo(superview.mas_left).offset(padding) // 设置左侧间距
make.center.equalTo(self.view) //控制中心的约束方法是
make.height.lessThanOrEqualTo(self.view) // 设置最大高度不允许超过self.view
make.height.equalTo(@[greenView, blueView]); // 通过数组可以设置同时等于两个view的高度

make.left.equalTo(@(10)); // 直接设置与父控件左侧边距 同理：.bottom  /  .right   / .top 
make.center.equalTo(CGPointMake(10,20)); // 直接设置在父控件中心点的位置
make.size.equalTo(CGSizeMake(100,100)); // 直接设置宽高

make.edges.equalTo(self.view).insets(UIEdgeInsetsMake(5, 10, 15, 20)); // 设置与父控件的间距
make.top.left.bottom.equalTo(self.view); // 连续设置多个约束






