官网：https://developers.weixin.qq.com/miniprogram/dev/framework/
########################################################
wxd41d6c19d3141180

基础
**************************************************************
小程序开发 页面结构WXML  页面样式WXSS  交互响应JavaScript
网页  开发 页面结构HTML  页面样式 CSS  交互响应JavaScript
两个几乎一样

使用flex布局
支持TS语言
也可以自行搭建less、sass开发环境

在小程序中，页面渲染和业务逻辑是分开的，分别运行在不同的线程中，
逻辑层运行在JSCore中，并没有一个完整的浏览器对象，因而缺少相关的DOM API和BOM API和BOM API和BOM AIP 
因此jQuery不能使用
小程序性能介于纯网页开发与原生之间

运行环境
iOS 逻辑层 JavaScriptCore  渲染层WKWebView
Android   V8              chromium定制内核
开发工具   NWJS             chrome WebView 

不经常使用、但是刚需、不会停留太久的简单工具
比如天气预报、买票、出行住宿、缴费、话费、外卖、快递

小程序好处：跨平台、开发门槛低、开发周期短、开发成本低（对初创企业是个很好的选择）
APP成本太高，每隔平台都要维护一套代码
发布上线：提交微信公众平台审核

vscode开发微信小程序
插件：搜索微信 -- minapp
     小程序开发助手

重要：官方demo ： https://github.com/wechat-miniprogram/miniprogram-demo
 网友整理demo： https://github.com/justjavac/awesome-wechat-weapp
 https://github.com/opendigg/awesome-github-wechat-weapp
UI组件库：
https://github.com/Tencent/weui-wxss
https://github.com/TalkingData/iview-weapp
https://github.com/youzan/vant-weapp
https://github.com/meili/minui
https://github.com/wux-weapp/wux-weapp
https://github.com/weilanwl/ColorUI
京东凹凸实验室https://github.com/NervJS/taro-ui

小程序注册指南
https://developers.weixin.qq.com/miniprogram/introduction/
https://mp.weixin.qq.com/ 点击注册-小程序
利用邮箱注册小程序：
https://mp.weixin.qq.com/wxopen/waregister?action=step1

开发者文档也可以在开发者工具中 -- 点击 帮助  -  开发者文档

对JS代码进行断点调试
app.js  中 onLaunch: function(){}  app一启动就会调用此方法
开发者工具左上角 有个 调试器 按钮，可以显示console.log信息
断点调试方法，在代码中添加
第一种思路 debugger;
第二种思路 在source文件的sm文件中打断点
没有sm文件，可以在文件夹开合中打开

目录结构
小程序主要包含一个描述整体程序的app和多个描述个字页面的page
app.js  app.json  app.wxss(全局布局样式，可有可无)  必须放在根目录（文件名固定）

app.json 中配置导航栏的文字和主题色调

重要*******************
建议单位是rpx，不是px
可以根据屏幕宽度进行自适应，规定屏幕宽度为750rpx


一个页面由4个文件组成
js    页面逻辑
wxml  页面结构
json  页面配置
wxss  页面样式表



flex布局
**************************************************************
弹性布局，在小程序中开发经常使用
div>div.item*5 快速设置h5框架

flex默认是从左往右，不是从上到下
display:flex 和 inline-flex都可以开启flex布局
区别
flex： container容器是以block-level形式存在 块级元素， 块级独占一行
inline-flex： container容器是以inline-level形式存在，行内块级，能更其他div占一行

（技巧）
给class添加宽高
w100+h100 回车，可以快速添加宽高各为100的属性

文字居中
text-align:center;
line-height:100rps;

flex-direction决定了主轴方向 有四个值 row/row-reverse/column/column-reverse 
justfy-content主轴的对齐方式flex-start/flex-end/space-around/space-between


微信小程序开发
**************************************************************
进入小程序显示的第一个页面是在app.json中配置的pages中排第一个的页面

界面搭建.wxml中建议外面包一个view，方便后面调整
<view></view>，第一选择就是view，如果不知道该使用哪个容器的情况下

给按钮绑定点击事件： bindtap="btnClickMethod"
data-*可以自定义属性
点击按钮传值 要在按钮上添加data-方法  <button bindtap="btnClickMethod" data-age="123">按钮</button>
在方法中获取传递的数据：
btnClickMethod(value){
  console.log("btnClickMethod - ",value.currentTarget.dataset.age)
},
不仅仅是button可以添加bindtap事件，view也可以

循环布局 （在vscode可实现）
1，先输入view ，2 在<>中输入for
或者直接输入view-for 
可以在src=""中添加{{}} 比如src="https://www.baidu.com/{{a.key}}"

获取data数据
this.data.name
修改data数据并刷新页面
this.setData({
  name:'aaa'
})

设置阴影
box-shadow:2rpx 2rpx 2rpx 0 rgb 
前两个参数是x、y方向，
第三个参数是阴影厚度
第四个参数是阴影延伸
第五个参数是颜色

切角
boder-radius: 50rpx

设置view的高度占屏幕100%方法 设置高度为100vh
计算属性：height: calc(10 * 10rpx);
或者：calc(50% - 50px);
注意：calc 内部的表达式，在使用运算符号时，两遍必须加上空格（虽然乘除可以无视，但还是建议带上）！！！！！，不然会解析错误！！

view默认是block类型
使用scroll-view步骤
********************************************************************
1，搭建基本框架，设置white-space为nowrap
.myscrollView{
  white-space: nowrap;
}
2，如果是横向移动，设置scroll-x="true" 内部子元素为display: inline-block;
3，如果是纵轴移动，设置scroll-x="false" scroll-y="true" 注意scrollview高度要写死，不然会被撑起来
   内部子元素设置为display: block;

使用swiper要点：swiper一定要和swiper-item两个配合使用
控制swiper滚动方向 vertical="false" ，把这个代码删除掉就是横向滚动，添加就是垂直滚动，不管怎么修改属性值
注意，给swiper赋值的时候autoplay="false"这样赋值会出问题，要autoplay="{{false}}"
很奇怪

promise的写法
********************************************************************
/**获取用户信息
 * 
 * const tool = require('../../utils/tool.js')
 * viewClickMethod: async function() {
 *   const info = await tool.getUserinfo();
 * }
 * (注意:微信小程序中的async 写在function前面)
 */
const getUserinfo = function() {
  return new Promise((resolve, reject) => { 
    wx.getUserInfo({
      complete: (res) => {
        resolve(res)
      },
      fail: (err)=>{
        reject(err)
      },
    })
  });
}

module.exports = {
  getUserinfo
}
********************************************************************

icon的用法
<icon type="success" size="20"></icon> 
可以使用size来调节大小，通过type来控制图标显示，可以省图标
普通警告// 通过控制color来实现
<icon type="warn" size="93" color="#C9C9C9"></icon>
type: info/success/warn(警告)/waiting(等待)/success_no_circle(选中)/circle(未选中)/download(下载)
info_circle(提示)/cancel（关闭）/search(搜索)

进度条用法
<progress percent="20" show-info stroke-width="3"/> 不带动画
<progress percent="40" active stroke-width="3" /> 带有动画


富文本渲染，相当于vue中的v-html
<rich-text nodes="{{htmlSnip}}"></rich-text>

按钮button
漂亮的按钮要添加type属性
primary/default/warn
plain属性可以控制按钮内部是否填充
disabled属性控制按钮是否允许被点击
open-type可以添加微信开放的部分功能

多选check的使用
********************************************************************
<checkbox-group bindchange="checkBoxGroupClick">
    <label class="innerlabel">
      <checkbox class="check" value="v1">
      </checkbox>
        你好01
    </label>
    <label class="innerlabel">
      <checkbox class="check" value="v2">
      </checkbox>
        你好02
    </label>
</checkbox-group>

在js文件中实现checkBoxGroupClick方法

checkBoxGroupClick(e){
  console.log('e.value = ',e.detail.value);
  // value中是value的数组
}
********************************************************************
单选框
<radio-group name="radio">
  <label><radio value="radio1"/>选项一</label>
  <label><radio value="radio2"/>选项二</label>
</radio-group>

输入框
<input class="weui-input" name="input" placeholder="这是一个输入框" />

picker选择器
<picker class="myPicker" range="{{list}}">
  {{list[selectedIndex]}}
</picker>

注意点要在picker内部包一个显示的文本，选择器才会出现，具体可以参考文档
https://developers.weixin.qq.com/miniprogram/dev/component/picker.html

********************************************************************
导航跳转方法
在vscode中输入wx-navigator即可
路由相对于当前 比如: "../first/first?id=111"
下个界面接受参数方法为
onLoad: function (options) {
  console.log(options.id);
},
返回上个page
wx-navigatorback
如何返回传值
重点来了：
在下一个界面的按钮点击进入方法中

   // 获取当前所有page数量
    var pages = getCurrentPages();
    var prevPage = pages[pages.length - 2];  //上一个页面
    prevPage.setData({
      params:'last'
    });
    wx.navigateBack({
      delta: 1
    });

********************************************************************
图片组件
注意千万不要和img组件搞混淆了
<image class="myImage" src="{{imgSrc}}" mode="aspectFill" lazy-load="{{true}}" binderror="" bindload="">




